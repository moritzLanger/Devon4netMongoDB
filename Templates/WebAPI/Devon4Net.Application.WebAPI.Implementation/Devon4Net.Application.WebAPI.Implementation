<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Devon4Net.Application.WebAPI.Implementation</name>
    </assembly>
    <members>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Business.AntiForgeryTokenManagement.Controllers.AntiForgeryTokenController">
            <summary>
            TODOs controller
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.AntiForgeryTokenManagement.Controllers.AntiForgeryTokenController.#ctor(Microsoft.AspNetCore.Antiforgery.IAntiforgery)">
            <summary>
            Constructor
            </summary>
            <param name="antiForgeryToken"></param>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.AntiForgeryTokenManagement.Controllers.AntiForgeryTokenController.Token">
            <summary>
            Gets the antiforgery token
            </summary>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.AntiForgeryTokenManagement.Controllers.AntiForgeryTokenController.HelloSecured">
            <summary>
            Gets the secured string result
            </summary>
            <returns></returns>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Business.AuthManagement.Controllers.AuthController">
            <summary>
            Auth controller sample.
            Please remember to avoid the use ob logic in a controller !!!
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.AuthManagement.Controllers.AuthController.#ctor(Devon4Net.Infrastructure.JWT.Handlers.IJwtHandler)">
            <summary>
            Constructor with DI
            </summary>
            <param name="jwtHandler"></param>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.AuthManagement.Controllers.AuthController.Login(System.String,System.String)">
            <summary>
            Performs the login proces via the user/password flow
            This is only a sample. Please avoid any logic on the controller.
            </summary>
            <returns>LoginResponse class will provide the JWT token to securize the server calls</returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.AuthManagement.Controllers.AuthController.CurrentUser">
            <summary>
            Provides the information related to the logged user
            This is only a sample. Please never put any logic on a controller
            </summary>
            <returns></returns>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Business.AuthManagement.Dto.CorporateBasicInfo">
            <summary>
            CorporateBasicInfo definition
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Business.AuthManagement.Dto.CorporateBasicInfo.Id">
            <summary>
            the identifier
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Business.AuthManagement.Dto.CorporateBasicInfo.Value">
            <summary>
            the provided value
            </summary>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Business.AuthManagement.Dto.CurrentUserResponse">
            <summary>
            CurrentUserResponse definition
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Business.AuthManagement.Dto.CurrentUserResponse.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Business.AuthManagement.Dto.CurrentUserResponse.UserName">
            <summary>
            UserName
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Business.AuthManagement.Dto.CurrentUserResponse.FirstName">
            <summary>
            FirstName
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Business.AuthManagement.Dto.CurrentUserResponse.LastName">
            <summary>
            LastName
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Business.AuthManagement.Dto.CurrentUserResponse.CorporateInfo">
            <summary>
            List of claims
            </summary>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Business.AuthManagement.Dto.LoginResponse">
            <summary>
            LoginResponse
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Business.AuthManagement.Dto.LoginResponse.Token">
            <summary>
            Token
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.DishManagement.Controllers.DishController.#ctor(Devon4Net.Application.WebAPI.Implementation.Business.DishManagement.Service.IDishService)">
            <summary>
            Constructor
            </summary>
            <param name="DishService"></param>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.DishManagement.Converters.DishConverter.EntityToApi(Devon4Net.Application.WebAPI.Implementation.Domain.Entities.Dish)">
            <summary>
            Transforms entity object to Dto object
            </summary>
            <param name="item">Entity item to be transformed to api Dto</param>
            <returns>API Dto</returns>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Business.DishManagement.Dto.DishDtoResult.extras">
            <summary>
            Association from DishDtoResult [simple] to ExtraDto [many]
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Business.DishManagement.Dto.DishDtoResult.categories">
            <summary>
            Association from DishDtoResult [simple] to CategoryDto [many]
            </summary>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Business.DishManagement.Service.IDishService">
            <summary>
            TodoService interface
            </summary>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Business.MediatRManagement.Commands.CreateTodoCommand">
            <summary>
            THe command to create a TO-DO
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Business.MediatRManagement.Commands.CreateTodoCommand.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.MediatRManagement.Commands.CreateTodoCommand.#ctor(System.String)">
            <summary>
            Constructor of the query 
            </summary>
            <param name="description"></param>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Business.MediatRManagement.Controllers.MediatRController">
            <summary>
            Controller sample to implement the mediator pattern
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.MediatRManagement.Controllers.MediatRController.#ctor(Devon4Net.Infrastructure.MediatR.Handler.IMediatRHandler)">
            <summary>
            Mediator sample controller
            </summary>
            <param name="mediatRHandler"></param>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.MediatRManagement.Controllers.MediatRController.GetTodoById(System.Int64)">
            <summary>
            Gets a TO-DO item given the Id via CQRS pattern via a MediatR query
            </summary>
            <param name="todoId"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.MediatRManagement.Controllers.MediatRController.CreateTodo(System.String)">
            <summary>
            Creates a TO-DO item sending a MediatR via a message command
            </summary>
            <param name="todoDescription">The description of the TO-DO command. It cannot be empty</param>
            <returns></returns>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Business.MediatRManagement.Dto.TodoResultDto">
            <summary>
            TodoDto definition
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Business.MediatRManagement.Dto.TodoResultDto.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Business.MediatRManagement.Dto.TodoResultDto.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Business.MediatRManagement.Dto.TodoResultDto.Done">
            <summary>
            Done
            </summary>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Business.MediatRManagement.Exceptions.TodoNotFoundException">
            <summary>
            Custom exception TodoNotFoundException
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Business.MediatRManagement.Exceptions.TodoNotFoundException.StatusCode">
            <summary>
            The forced http status code to be fired on the exception manager
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Business.MediatRManagement.Exceptions.TodoNotFoundException.ShowMessage">
            <summary>
            Show the message on the response?
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.MediatRManagement.Exceptions.TodoNotFoundException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Devon4Net.Application.WebAPI.Implementation.Business.MediatRManagement.Exceptions.TodoNotFoundException"/> class.
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.MediatRManagement.Exceptions.TodoNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Devon4Net.Application.WebAPI.Implementation.Business.MediatRManagement.Exceptions.TodoNotFoundException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.MediatRManagement.Exceptions.TodoNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Devon4Net.Application.WebAPI.Implementation.Business.MediatRManagement.Exceptions.TodoNotFoundException"/> class.
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.MediatRManagement.Exceptions.TodoNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Devon4Net.Application.WebAPI.Implementation.Business.MediatRManagement.Exceptions.TodoNotFoundException"/> class.
            </summary>
            <param name="serializationInfo"></param>
            <param name="streamingContext"></param>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Business.MediatRManagement.Handlers.CreateTodoHandler">
            <summary>
            CreateTodoHandler
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.MediatRManagement.Handlers.CreateTodoHandler.#ctor(Devon4Net.Application.WebAPI.Implementation.Business.TodoManagement.Service.ITodoService,Devon4Net.Infrastructure.MediatR.Domain.ServiceInterfaces.IMediatRBackupService,Devon4Net.Infrastructure.MediatR.Domain.ServiceInterfaces.IMediatRBackupLiteDbService)">
            <summary>
            CreateTodoHandler
            </summary>
            <param name="todoService"></param>
            <param name="mediatRBackupService"></param>
            <param name="mediatRBackupLiteDbService"></param>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.MediatRManagement.Handlers.CreateTodoHandler.#ctor(Devon4Net.Application.WebAPI.Implementation.Business.TodoManagement.Service.ITodoService,Devon4Net.Infrastructure.MediatR.Domain.ServiceInterfaces.IMediatRBackupLiteDbService)">
            <summary>
            CreateTodoHandler
            </summary>
            <param name="todoService"></param>
            <param name="mediatRBackupLiteDbService"></param>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.MediatRManagement.Handlers.CreateTodoHandler.#ctor(Devon4Net.Application.WebAPI.Implementation.Business.TodoManagement.Service.ITodoService,Devon4Net.Infrastructure.MediatR.Domain.ServiceInterfaces.IMediatRBackupService)">
            <summary>
            CreateTodoHandler
            </summary>
            <param name="todoService"></param>
            <param name="mediatRBackupService"></param>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.MediatRManagement.Handlers.CreateTodoHandler.HandleAction(Devon4Net.Application.WebAPI.Implementation.Business.MediatRManagement.Commands.CreateTodoCommand,System.Threading.CancellationToken)">
            <summary>
            HandleAction
            </summary>
            <param name="request"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Business.MediatRManagement.Handlers.GetTodoHandler">
            <summary>
            GetTodoHandler
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.MediatRManagement.Handlers.GetTodoHandler.#ctor(Devon4Net.Application.WebAPI.Implementation.Business.TodoManagement.Service.ITodoService,Devon4Net.Infrastructure.MediatR.Domain.ServiceInterfaces.IMediatRBackupService,Devon4Net.Infrastructure.MediatR.Domain.ServiceInterfaces.IMediatRBackupLiteDbService)">
            <summary>
            GetTodoHandler
            </summary>
            <param name="todoService"></param>
            <param name="mediatRBackupService"></param>
            <param name="mediatRBackupLiteDbService"></param>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.MediatRManagement.Handlers.GetTodoHandler.#ctor(Devon4Net.Application.WebAPI.Implementation.Business.TodoManagement.Service.ITodoService,Devon4Net.Infrastructure.MediatR.Domain.ServiceInterfaces.IMediatRBackupLiteDbService)">
            <summary>
            GetTodoHandler
            </summary>
            <param name="todoService"></param>
            <param name="mediatRBackupLiteDbService"></param>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.MediatRManagement.Handlers.GetTodoHandler.#ctor(Devon4Net.Application.WebAPI.Implementation.Business.TodoManagement.Service.ITodoService,Devon4Net.Infrastructure.MediatR.Domain.ServiceInterfaces.IMediatRBackupService)">
            <summary>
            GetTodoHandler
            </summary>
            <param name="todoService"></param>
            <param name="mediatRBackupService"></param>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.MediatRManagement.Handlers.GetTodoHandler.HandleAction(Devon4Net.Application.WebAPI.Implementation.Business.MediatRManagement.Queries.GetTodoQuery,System.Threading.CancellationToken)">
            <summary>
            Handles the received message to perform the query
            </summary>
            <param name="request"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Business.MediatRManagement.Queries.GetTodoQuery">
            <summary>
            
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Business.MediatRManagement.Queries.GetTodoQuery.TodoId">
            <summary>
            
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.MediatRManagement.Queries.GetTodoQuery.#ctor(System.Int64)">
            <summary>
            Constructor of the query 
            </summary>
            <param name="todoId"></param>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Business.RabbitMqManagement.Commands.TodoCommand">
            <summary>
            TO-DO command creation via RabbitMq
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Business.RabbitMqManagement.Commands.TodoCommand.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Business.RabbitMqManagement.Controllers.RabbitMqController">
            <summary>
            Controller sample to show how RabbitMq works
            Please setup your RabbitMq server in the configuration file
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.RabbitMqManagement.Controllers.RabbitMqController.#ctor(Devon4Net.Application.WebAPI.Implementation.Business.RabbitMqManagement.Handlers.TodoRabbitMqHandler,Microsoft.Extensions.Options.IOptions{Devon4Net.Infrastructure.RabbitMQ.Options.RabbitMqOptions})">
            <summary>
            Class constructor
            </summary>
            <param name="todoRabbitMqHandler">The main handler injected via DI</param>
            <param name="rabbitMqOptions">The RabbitMq options to check if there is any instance set up</param>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.RabbitMqManagement.Controllers.RabbitMqController.CreateTodo(System.String)">
            <summary>
            Creates a TO-DO command sending a RabbitMq message
            </summary>
            <param name="todoDescription">The description of the TO-DO command. It cannot be empty</param>
            <returns></returns>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Business.RabbitMqManagement.Handlers.TodoRabbitMqHandler">
            <summary>
            TodoRabbitMqHandler 
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.RabbitMqManagement.Handlers.TodoRabbitMqHandler.#ctor(Microsoft.Extensions.DependencyInjection.IServiceCollection,EasyNetQ.IBus,System.Boolean)">
            <summary>
            TodoRabbitMqHandler constructor to ensure the DI needs
            </summary>
            <param name="services"></param>
            <param name="serviceBus"></param>
            <param name="subscribeToChannel"></param>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.RabbitMqManagement.Handlers.TodoRabbitMqHandler.#ctor(Microsoft.Extensions.DependencyInjection.IServiceCollection,EasyNetQ.IBus,Devon4Net.Infrastructure.RabbitMQ.Domain.ServiceInterfaces.IRabbitMqBackupService,System.Boolean)">
            <summary>
            TodoRabbitMqHandler constructor to ensure the DI needs
            </summary>
            <param name="services"></param>
            <param name="serviceBus"></param>
            <param name="rabbitMqBackupService"></param>
            <param name="subscribeToChannel"></param>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.RabbitMqManagement.Handlers.TodoRabbitMqHandler.#ctor(Microsoft.Extensions.DependencyInjection.IServiceCollection,EasyNetQ.IBus,Devon4Net.Infrastructure.RabbitMQ.Domain.ServiceInterfaces.IRabbitMqBackupLiteDbService,System.Boolean)">
            <summary>
            TodoRabbitMqHandler constructor to ensure the DI needs
            </summary>
            <param name="services"></param>
            <param name="serviceBus"></param>
            <param name="rabbitMqBackupLiteDbService"></param>
            <param name="subscribeToChannel"></param>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.RabbitMqManagement.Handlers.TodoRabbitMqHandler.#ctor(Microsoft.Extensions.DependencyInjection.IServiceCollection,EasyNetQ.IBus,Devon4Net.Infrastructure.RabbitMQ.Domain.ServiceInterfaces.IRabbitMqBackupService,Devon4Net.Infrastructure.RabbitMQ.Domain.ServiceInterfaces.IRabbitMqBackupLiteDbService,System.Boolean)">
            <summary>
            TodoRabbitMqHandler constructor to ensure the DI needs
            </summary>
            <param name="services"></param>
            <param name="serviceBus"></param>
            <param name="rabbitMqBackupService"></param>
            <param name="rabbitMqBackupLiteDbService"></param>
            <param name="subscribeToChannel"></param>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.RabbitMqManagement.Handlers.TodoRabbitMqHandler.HandleCommand(Devon4Net.Application.WebAPI.Implementation.Business.RabbitMqManagement.Commands.TodoCommand)">
            <summary>
            TodoRabbitMqHandler handler command
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Business.TodoManagement.Controllers.TodoController">
            <summary>
            TODOs controller
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.TodoManagement.Controllers.TodoController.#ctor(Devon4Net.Application.WebAPI.Implementation.Business.TodoManagement.Service.ITodoService)">
            <summary>
            Constructor
            </summary>
            <param name="todoService"></param>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.TodoManagement.Controllers.TodoController.GetTodo">
            <summary>
            Gets the entire list of TODOS
            </summary>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.TodoManagement.Controllers.TodoController.Create(System.String)">
            <summary>
            Creates the object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.TodoManagement.Controllers.TodoController.Delete(System.Int64)">
            <summary>
            Deletes the object provided the id
            </summary>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.TodoManagement.Controllers.TodoController.ModifyTodo(System.Int64)">
            <summary>
            Modifies the done status of the object provided the id
            </summary>
            <returns></returns>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Business.TodoManagement.Converters.TodoConverter">
            <summary>
            TodoConverter
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.TodoManagement.Converters.TodoConverter.ModelToDto(Devon4Net.Application.WebAPI.Implementation.Domain.Entities.Todos)">
            <summary>
            ModelToDto transformation
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Business.TodoManagement.Dto.TodoDto">
            <summary>
            TodoDto definition
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Business.TodoManagement.Dto.TodoDto.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Business.TodoManagement.Dto.TodoDto.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Business.TodoManagement.Dto.TodoDto.Done">
            <summary>
            Done
            </summary>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Business.TodoManagement.Service.ITodoService">
            <summary>
            TodoService interface
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.TodoManagement.Service.ITodoService.GetTodo(System.Linq.Expressions.Expression{System.Func{Devon4Net.Application.WebAPI.Implementation.Domain.Entities.Todos,System.Boolean}})">
            <summary>
            GetTodo
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.TodoManagement.Service.ITodoService.GetTodoById(System.Int64)">
            <summary>
            GetTodoById
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.TodoManagement.Service.ITodoService.CreateTodo(System.String)">
            <summary>
            CreateTodo
            </summary>
            <param name="description"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.TodoManagement.Service.ITodoService.DeleteTodoById(System.Int64)">
            <summary>
            DeleteTodoById
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.TodoManagement.Service.ITodoService.ModifyTodoById(System.Int64)">
            <summary>
            ModifyTodoById
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Business.TodoManagement.Service.TodoService">
            <summary>
            Service implementation
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.TodoManagement.Service.TodoService.#ctor(Devon4Net.Domain.UnitOfWork.UnitOfWork.IUnitOfWork{Devon4Net.Application.WebAPI.Implementation.Domain.Database.TodoContext})">
            <summary>
            Constructor
            </summary>
            <param name="uoW"></param>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.TodoManagement.Service.TodoService.GetTodo(System.Linq.Expressions.Expression{System.Func{Devon4Net.Application.WebAPI.Implementation.Domain.Entities.Todos,System.Boolean}})">
            <summary>
            Gets the object
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.TodoManagement.Service.TodoService.GetTodoById(System.Int64)">
            <summary>
            Gets the object by id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.TodoManagement.Service.TodoService.CreateTodo(System.String)">
            <summary>
            Creates the object
            </summary>
            <param name="description"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.TodoManagement.Service.TodoService.DeleteTodoById(System.Int64)">
            <summary>
            Deletes the object by id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.TodoManagement.Service.TodoService.ModifyTodoById(System.Int64)">
            <summary>
            Modifies te state of the object by id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Business.TodoManagement.Validators.TodosFluentValidator">
            <summary>
            TodosFluentValidator implementation
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.TodoManagement.Validators.TodosFluentValidator.#ctor(System.Boolean)">
            <summary>
            TodosFluentValidator constructor
            </summary>
            <param name="launchExceptionWhenError">Please set to false to not launching an exception</param>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Business.TodoManagement.Validators.TodosFluentValidator.CustomValidate">
            <summary>
            Custom validation for TodoDto
            </summary>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Configuration.DevonConfiguration">
            <summary>
            DevonConfiguration class
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Configuration.DevonConfiguration.SetupDevonDependencyInjection(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Sets up the service dependency injection
            For example:
            services.AddTransient"ITodoService, TodoService"();
            services.AddTransient"ITodoRepository, TodoRepository"();
            Put your DI declarations here
            </summary>
            <param name="services"></param>
            <param name="configuration"></param>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Configuration.DevonConfiguration.SetupDatabase(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Setup here your database connections.
            To use RabbitMq message backup declare the 'RabbitMqBackupContext' database setup
            PE: services.SetupDatabase&lt;RabbitMqBackupContext&gt;($"Data Source={FileOperations.GetFileFullPath("RabbitMqBackupSqLite.db")}", DatabaseType.Sqlite);
            Please add the connection strings to enable the backup messaging for MediatR abd RabbitMq using MediatRBackupContext and RabbitMqBackupContext
            </summary>
            <param name="services"></param>
            <param name="configuration"></param>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Data.Repositories.TodoRepository">
            <summary>
            Repository implementation for the TODOS
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Data.Repositories.TodoRepository.#ctor(Devon4Net.Application.WebAPI.Implementation.Domain.Database.TodoContext)">
            <summary>
            TodosFluentValidator
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Data.Repositories.TodoRepository.GetTodo(System.Linq.Expressions.Expression{System.Func{Devon4Net.Application.WebAPI.Implementation.Domain.Entities.Todos,System.Boolean}})">
            <summary>
            Get object method
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Data.Repositories.TodoRepository.GetTodoById(System.Int64)">
            <summary>
            Geto the object by id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Data.Repositories.TodoRepository.Create(System.String)">
            <summary>
            Creates the object
            </summary>
            <param name="description"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Data.Repositories.TodoRepository.DeleteTodoById(System.Int64)">
            <summary>
            Deletes the object by id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Domain.Database.DishContext">
            <summary>
            Context definition
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Domain.Database.DishContext.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions{Devon4Net.Application.WebAPI.Implementation.Domain.Database.DishContext})">
            <summary>
            Constructor
            </summary>
            <param name="options"></param>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Domain.Database.DishContext.Dishes">
            <summary>
            Dbset
            </summary>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Domain.Database.TodoContext">
            <summary>
            Context definition
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Domain.Database.TodoContext.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions{Devon4Net.Application.WebAPI.Implementation.Domain.Database.TodoContext})">
            <summary>
            Constructor
            </summary>
            <param name="options"></param>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Domain.Database.TodoContext.Todos">
            <summary>
            Dbset
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Domain.Database.TodoContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            Model rules definition
            </summary>
            <param name="modelBuilder"></param>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Domain.Entities.Category.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Domain.Entities.Category.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Domain.Entities.Category.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Domain.Entities.Category.ShowOrder">
            <summary>
            ShowOrder
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Domain.Entities.Category.ModificationCounter">
            <summary>
            ModificationCounter
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Domain.Entities.Dish.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Domain.Entities.Dish.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Domain.Entities.Dish.Price">
            <summary>
            Price
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Domain.Entities.Dish.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Domain.Entities.Dish.Image">
            <summary>
            Image
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Domain.Entities.Dish.Category">
            <summary>
            Category
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Domain.Entities.Image.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Domain.Entities.Image.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Domain.Entities.Image.Content">
            <summary>
            Content
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Domain.Entities.Image.MimeType">
            <summary>
            MimeType
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Domain.Entities.Image.Extension">
            <summary>
            Extension
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Domain.Entities.Image.ContentType">
            <summary>
            ContentType
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Domain.Entities.Image.ModificationCounter">
            <summary>
            ModificationCounter
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Domain.Entities.Ingredient.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Domain.Entities.Ingredient.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Domain.Entities.Ingredient.Price">
            <summary>
            Price
            </summary>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Domain.Entities.Todos">
            <summary>
            Entity class for Todos
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Domain.Entities.Todos.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Domain.Entities.Todos.Description">
            <summary>
            Description 
            </summary>
        </member>
        <member name="P:Devon4Net.Application.WebAPI.Implementation.Domain.Entities.Todos.Done">
            <summary>
            Done
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Domain.RepositoryInterfaces.IDishRepository.GetAll">
            <summary>
            Return all Dish entities saved in our collection.
            </summary>
            <returns>An IList of type Dish</returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Domain.RepositoryInterfaces.IDishRepository.GetDishesByCategory(System.Collections.Generic.IList{System.String})">
            <summary>
            Return all Dishes matching the category id's given as an argument
            </summary>
            <param name="categoryIdList">List of string category id's</param>
            <returns>An IList of type Dish matching the filter criteria</returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Domain.RepositoryInterfaces.IDishRepository.GetDishesByPrice(System.Decimal)">
            <summary>
            Return all Dishes which prices are less or equal to given maxPrice
            </summary>
            <param name="maxPrice">Max Price to filter given as a decimal</param>
            <returns>An IList of type Dish matching the filter criteria</returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Domain.RepositoryInterfaces.IDishRepository.GetDishesByString(System.String)">
            <summary>
            Return all Dishes which name include the content of searchBy
            </summary>
            <param name="searchBy">A string to search for in Dish names</param>
            <returns>An IList of type Dish matching the filter criteria</returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Domain.RepositoryInterfaces.IDishRepository.GetDishesByLikes(System.Int32)">
            <summary>
            Return all Dishes which have at least minLikes likes.
            </summary>
            <param name="minLikes">Integer of minimum likes to filter for</param>
            <returns>An IList of type Dish matching the filter criteria</returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Domain.RepositoryInterfaces.IDishRepository.GetDishesMatchingCriteria(System.Decimal,System.Int32,System.String,System.Collections.Generic.IList{System.String})">
            <summary>
            Return all Dishes which cost maximum @maxPrice, have at least @minLikes, contain the string @searchBy in their name and are categorized by @categoryIdList 
            </summary>
            <param name="maxPrice">Decimal maximum price to filter dishes for</param>
            <param name="minLikes">Integer of minimum likes to filter dishes for</param>
            <param name="searchBy">String to filter Dish names for</param>
            <param name="categoryIdList">List of string category id's to filter dishes for</param>
            <returns>An IList of type Dish matching the filter criteria</returns>
        </member>
        <member name="T:Devon4Net.Application.WebAPI.Implementation.Domain.RepositoryInterfaces.ITodoRepository">
            <summary>
            TodoRepository interface
            </summary>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Domain.RepositoryInterfaces.ITodoRepository.GetTodo(System.Linq.Expressions.Expression{System.Func{Devon4Net.Application.WebAPI.Implementation.Domain.Entities.Todos,System.Boolean}})">
            <summary>
            
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Domain.RepositoryInterfaces.ITodoRepository.GetTodoById(System.Int64)">
            <summary>
            GetTodoById
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Domain.RepositoryInterfaces.ITodoRepository.Create(System.String)">
            <summary>
            Create
            </summary>
            <param name="description"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.Application.WebAPI.Implementation.Domain.RepositoryInterfaces.ITodoRepository.DeleteTodoById(System.Int64)">
            <summary>
            DeleteTodoById
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
    </members>
</doc>
